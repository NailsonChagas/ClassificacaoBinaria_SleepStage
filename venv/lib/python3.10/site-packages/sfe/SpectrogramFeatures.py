from sfe.sfe_aux_tools import *
import numpy as np
from scipy.stats import kurtosis
from scipy.stats import skew
import math

class SpectrogramFeatures:#(numpy.ndarray):
    def __init__(self, spec, fs, nfft, delta_power = [1, 4],
                 theta_power = [4, 8], alpha_power = [8, 12],
                 beta_power = [12, 30], gamma_power = [30, 60],
                 entire_power = [1, 60], label = ''):
        self.sg = spec #np.asmatrix(spec)
        self.fs = fs
        self.nfft = nfft
        self.delta_p = delta_power
        self.theta_p = theta_power
        self.alpha_p = alpha_power
        self.beta_p = beta_power
        self.gamma_p = gamma_power
        self.entire_p = entire_power
        self.label = label


    def extract_features(self, delta_f = True, theta_f = True, alpha_f = True,
                         beta_f = True, gamma_f = True, entire_f = True):
        #freq_grid = getfgrid(self.fs, self.nfft)
        freq_grid = getfgrid(self.fs, len(self.sg))
        features = {}

        if (delta_f):
            delta_fg = spectrum_filter(freq_grid, self.fs, self.delta_p)
            delta_sg = spectrum_filter(self.sg, self.fs, self.delta_p)
            features.update(self.__compute_measures(delta_sg, delta_fg, range_f_label = 'delta_' + self.label))

        if (theta_f):
            theta_fg = spectrum_filter(freq_grid, self.fs, self.theta_p)
            theta_sg = spectrum_filter(self.sg, self.fs, self.theta_p)
            features.update(self.__compute_measures(theta_sg, theta_fg, range_f_label = 'theta_' + self.label))

        if (alpha_f):
            alpha_fg = spectrum_filter(freq_grid, self.fs, self.alpha_p)
            alpha_sg = spectrum_filter(self.sg, self.fs, self.alpha_p)
            features.update(self.__compute_measures(alpha_sg, alpha_fg, range_f_label = 'alpha_' + self.label))

        if (beta_f):
            beta_fg = spectrum_filter(freq_grid, self.fs, self.beta_p)
            beta_sg = spectrum_filter(self.sg, self.fs, self.beta_p)
            features.update(self.__compute_measures(beta_sg, beta_fg, range_f_label = 'beta_' + self.label))

        if (gamma_f):
            gamma_fg = spectrum_filter(freq_grid, self.fs, self.gamma_p)
            gamma_sg = spectrum_filter(self.sg, self.fs, self.gamma_p)
            features.update(self.__compute_measures(gamma_sg, gamma_fg, range_f_label = 'gamma_' + self.label))

        if (entire_f):
            entire_fg = spectrum_filter(freq_grid, self.fs, self.entire_p)
            entire_sg = spectrum_filter(self.sg, self.fs, self.entire_p)
            features.update(self.__compute_measures(entire_sg, entire_fg, range_f_label = 'entire_' + self.label))

        return features


    def __generate_feature_dictionary(self, range_f_label):
        dic_features = {'SG_average_' + range_f_label: None,
                        'SG_std_' + range_f_label: None,
                        'SG_min_' + range_f_label: None,
                        'SG_peak_' + range_f_label: None,
                        'SG_kurtosis_' + range_f_label: None,
                        'SG_skewness_' + range_f_label: None,
                        'SG_line_length_' + range_f_label: None,
                        'SG_nonlinear_energy_' + range_f_label: None,
                        'SG_Hurst_exponent_' + range_f_label: None,
                        'SG_Shannon_entropy_' + range_f_label: None,
                        'SG_Renyi_entropy_' + range_f_label: None,
                        'SG_centroid_' + range_f_label: None,
                        'SG_sbe_' + range_f_label: None, # spectral band energy
                        'SG_sbw_' + range_f_label: None, # spectral band width
                        #'SG_approximate_entropy_' + range_f_label: None,
                        #'SG_sample_entropy_' + range_f_label: None,
                        'SG_rms_' + range_f_label: None,
                        'SG_crest_factor_' + range_f_label: None,
                        'SG_var_coef_' + range_f_label: None,
                        'SG_Q1_' + range_f_label: None,
                        'SG_Q2_' + range_f_label: None,
                        'SG_Q3_' + range_f_label: None,
                        'SG_interquatile_range_' + range_f_label: None}

        return dic_features


    def __compute_measures(self, sg, fg, range_f_label = ''):
        dic_features = self.__generate_feature_dictionary(range_f_label)
        rSG = self.sg.reshape(-1)
        sSG = sg.reshape(-1) # sample sg

        #print(range_f_label)

        #print('average_' + range_f_label)
        dic_features['SG_average_' + range_f_label] = np.average(sSG)
        #print('std_' + range_f_label)
        dic_features['SG_std_' + range_f_label] = np.std(sSG)
        #print('min_' + range_f_label)
        dic_features['SG_min_' + range_f_label] = np.min(sSG)
        #print('peak')
        dic_features['SG_peak_' + range_f_label] = np.max(sSG)
        #print('kurtosis')
        dic_features['SG_kurtosis_' + range_f_label] = kurtosis(sSG)
        #print('skewness')
        dic_features['SG_skewness_' + range_f_label] = skew(sSG)
        #print('line_length')
        #dic_features['SG_line_length_' + range_f_label] = line_length(sSG)
        #print('nonlinear_energy')
        #dic_features['SG_nonlinear_energy_' + range_f_label] = nonlinear_energy(sSG)
        #print('Hurst_exponent')
        #dic_features['SG_Hurst_exponent_' + range_f_label] = Hurst_exponent(sSG)
        #print('Shannon_entropy')
        #dic_features['SG_Shannon_entropy_' + range_f_label] = Shanon_entropy(sSG)
        #print('SG_Renyi_entropy')
        #dic_features['SG_Renyi_entropy_' + range_f_label] = Renyi_entropy(sSG)
        #print('centroid')
        dic_features['SG_centroid_' + range_f_label] = np.sum(sg.T * np.asarray(np.asmatrix(fg).T).reshape(-1)) / np.sum(rSG)
        #print('sbe')
        dic_features['SG_sbe_' + range_f_label] = np.sum(sSG) / np.sum(rSG)
        #print('sbw')
        dic_features['SG_sbw_' + range_f_label] = np.matrix.sum(np.asmatrix(sg * np.asarray(np.asmatrix((fg - dic_features['SG_centroid_' + range_f_label]) ** 2).T))) / np.sum(rSG)
        #print('approximate_entropy') Muito custoso
        #dic_features['SG_approximate_entropy_' + range_f_label] = ApEn(sSG, 2, 0.2 * dic_features['SG_std_' + range_f_label])
        #print('SG_sample_entropy') Muito custo
        #dic_features['SG_sample_entropy_' + range_f_label] = sampen(sSG, 2, 0.2 * dic_features['SG_std_' + range_f_label])
        #print('rms')
        dic_features['SG_rms_' + range_f_label] = math.sqrt(sum(sSG ** 2)) / len(sSG)
        #print('crest_factor')
        dic_features['SG_crest_factor_' + range_f_label] = dic_features['SG_peak_' + range_f_label] / dic_features['SG_rms_' + range_f_label]
        #print('var_coef')
        dic_features['SG_var_coef_' + range_f_label] = dic_features['SG_average_' + range_f_label] / dic_features['SG_std_' + range_f_label]
        #print('Q1')
        dic_features['SG_Q1_' + range_f_label] = np.percentile(sSG, 25)
        #print('Q2')
        dic_features['SG_Q2_' + range_f_label] = np.percentile(sSG, 50)
        #print('Q3')
        dic_features['SG_Q3_' + range_f_label] = np.percentile(sSG, 75)
        #print('Q3 - Q1')
        dic_features['SG_interquatile_range_' + range_f_label] = dic_features['SG_Q3_' + range_f_label] - dic_features['SG_Q1_' + range_f_label]


#dic_features['centroid_' + range_f_label] = np.sum(ps * fg) / np.sum(ps)

        # ver isso
        return dic_features
